version: '3'
services:
  redis:
    image: "redis:alpine"
    # ports:
    #   - "6379:6379"
    # expose:
    #   - 6379
    restart: always
    # command: >
    #   sh -c "start redis-server"
    

  web:
    container_name: web
    # image: andreymazo/bulletin_board_backend_web:1.0
    build:     
      context: .
      dockerfile: Dockerfile
    env_file:
      .env.dev
    environment:
      - REDIS_HOST=redis
    tty: true
    ports:
      - 8000:8000
    depends_on:
      # - db
      # - redis
      # db:
      #   condition: service_healthy
      db:
        condition: service_healthy
        # restart: true
      redis:
        condition: service_started
    command: >
      sh -c "python manage.py makemigrations && python manage.py migrate && python manage.py loaddata --exclude contenttypes db1.json  && python manage.py runserver 0.0.0.0:8000"  
  celery:
    # image: celery
    build: .
    env_file:
      .env.dev
    environment:
      - DEBUG=1
      - DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_BACKEND=redis://redis:6379/0
    command: celery -A config worker -l info
    
    volumes:
      - .:/code
    depends_on:
      # - web
      # - redis
      # - db
      db:
        condition: service_healthy
      #   # restart: true
      redis:
        condition: service_started
  celery-beat:
    build: .
    
    # command: celery -A config beat -l info

    volumes:
      - .:/code
    depends_on:
      # - web
      # - redis
      # - db
      db:
        condition: service_healthy
      #   # restart: true
      redis:
        condition: service_started
   
  db:
    container_name: db
    # image: andreymazo/bulletin_board_backend_db:1.0
    build:
      context: .
      dockerfile: Dockerfile-db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: "123456"
      POSTGRES_DB: bulletin
      # - "POSTGRES_HOST_AUTH_METHOD=trust"
    env_file:
      - .env.dev
    ports:
      - '5432'
    volumes:
      - ./db:/docker-entrypoint-initdb.d/
      - database_volume:/var/lib/postgresql/data

    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U postgres -d bulletin'"]
      interval: 5s
      timeout: 5s
      retries: 5


  # celery:
  #   depends_on:
  #     -redis

  # redis:
  #   ports:
  #     - 8000:8000
volumes:
  database_volume:
    

    
  #   networks:
  #   some_network:
  # networks:
  #  some_network:


  # docker-compose down --volumes && docker-compose up
  # docker system prune -a
  # https://www.gangofcoders.net/solution/could-not-translate-host-name-db-to-address-using-postgres-docker-compose-and/
  
#   version: '3'
#  services:
#   db:
#      image: 'postgres'
#      ports:
#        - '5432'
#      networks:
#       some_network:
#   core:
#     build:
#       context: .
#       dockerfile: Dockerfile
#     command: python3 manage.py runserver 0.0.0.0:8000
#     ports:
#       - '8000:8000'
#     volumes:
#       - .:/code
#     depends_on:
#       - db
#     links:
#       - db:db
#     networks:
#       some_network:
#   networks:
#    some_network:

# docker container prune
#  docker system prune -a
#  docker system prune
# docker volume prune
# docker images -a
# docker rmi Img <...>
# docker stop $(docker ps -a -q)
# docker rm $(docker ps -a -q)

#Создаем у себя контейнер и имидж docker-compose up
# Логинимся и создаем таг docker tag <image name> andreymazo/<image name>:<tag num> for ex:1.0 
# Пушим docker push andreymazo/<image name>:<tag num>

# docker run -p 6379:6379 --name some-redis -d redis

# docker tag 30a52449db6d andreymazo/bulletin_board_backend_celery-beat:1.0
# docker push andreymazo/bulletin_board_backend_celery-beat:1.0 
# Очистка от всех контейнеров, имиджей и вольюмов:
# docker stop $(docker ps -a -q)
# docker-compose down --volumes
# docker volume prune
# docker rm $(docker ps -a -q)
# docker rmi $(docker images -a -q)
# docker rmi -f $(docker images -aq)
# docker volume rm $(docker volume ls -q --filter dangling=true)

# Проверка (должны быть пустые строки)
# docker images -a
# docker ps -a
# docker volume ls


# docker info | sed '/Username:/!d;s/.* //'