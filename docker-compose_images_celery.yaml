version: '3'
services:
  redis:
    image: "redis:alpine"

  web:
    container_name: web
    image: andreymazo/bulletin_board_backend_web:1.0
    # build:     
    #   context: .
    #   dockerfile: Dockerfile
    env_file:
      .env.dev  
    tty: true
    ports:
      - 8000:8000
    depends_on:
      -db
      -redis
      # db:
      #   condition: service_healthy
    command: >
      sh -c " python manage.py makemigrations && python manage.py migrate && python manage.py update_translation_fields && python manage.py runserver 0.0.0.0:8000"  
  celery:
    build: .
    command: celery -A config worker -l info
    volumes:
      - .:/code
    depends_on:
      - db
      - redis
  celery-beat:
    build: .
    command: celery -A config beat -l info
    volumes:
      - .:/code
    depends_on:
      - db
      - redis
   
  db:
    container_name: db2
    image: andreymazo/bulletin_board_backend_db:1.0
    # build:
    #   context: .
    #   dockerfile: Dockerfile-db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: "123456"
      POSTGRES_DB: bulletin
      # - "POSTGRES_HOST_AUTH_METHOD=trust"
    env_file:
      - .env.dev
    ports:
      - '5432'
    volumes:
      - ./db:/docker-entrypoint-initdb.d/
      - database_volume:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U postgres -d bulletin'"]
      interval: 5s
      timeout: 5s
      retries: 5
  # celery:
  #   depends_on:
  #     -redis

  # redis:
  #   ports:
  #     - 8000:8000
volumes:
  database_volume:
    

    
  #   networks:
  #   some_network:
  # networks:
  #  some_network:


  # docker-compose down --volumes && docker-compose up
  # docker system prune -a
  # https://www.gangofcoders.net/solution/could-not-translate-host-name-db-to-address-using-postgres-docker-compose-and/
  
#   version: '3'
#  services:
#   db:
#      image: 'postgres'
#      ports:
#        - '5432'
#      networks:
#       some_network:
#   core:
#     build:
#       context: .
#       dockerfile: Dockerfile
#     command: python3 manage.py runserver 0.0.0.0:8000
#     ports:
#       - '8000:8000'
#     volumes:
#       - .:/code
#     depends_on:
#       - db
#     links:
#       - db:db
#     networks:
#       some_network:
#   networks:
#    some_network: